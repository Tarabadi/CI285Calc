
==================== FINAL INTERFACE ====================
2016-05-16 16:11:10.9986378 UTC

interface main@main:Main [family instance module] 7103
  interface hash: 774d8b729860f19d51168fa20c8a49f9
  ABI hash: 611be62a7df07937d9d9303ea68b46f8
  export-list hash: d04d2ca07ea918a472a12684fe0def63
  orphan hash: ca65b044a4730d41ad4392963bb443f2
  flag hash: ea579b5e024146bd7762b32a97a354a8
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.main
module dependencies:
package dependencies: ReadArgs-1.2.2@ReadA_6cFSpvK65fZLeOKMWH0GL4
                      StateVar-1.1.0.4@State_IOvB80WkYNkEizdt0JVpzy
                      Win32-2.3.1.0@Win32_ELFLzTRksT8Dql3wobiWvb
                      adjunctions-4.3@adjun_9cH29t7MfJW4aX0z24PvBh
                      aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK
                      aeson-compat-0.3.2.0@aeson_9zXJFuZqzS1816Srcg2yr5
                      ansi-terminal-0.6.2.3@ansit_17j0yRazsq84la3DzBiNwu
                      appar-0.1.4@appar_0ov5bpGH3STIB4U7WU8MFi
                      array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      async-2.1.0@async_KuqnF1GrhHK5nNp6Zzm3jy
                      attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3
                      auto-update-0.1.3.1@autou_JxODiy791X7A5hkNmGN2Ed base-4.8.2.0
                      base64-bytestring-1.0.0.1@base6_AkCk8zInckjJsyQ4AIFHPN
                      base-compat-0.9.1@basec_2xZbfoWKo1S83E1QMdM4mB
                      base-orphans-0.5.4@baseo_0gFtKFBT26OGSKHmmdqdfx
                      basic-prelude-0.5.1@basic_6MJWJCVkTz8FGKC6mXGpJH
                      bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2
                      binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      blaze-html-0.8.1.1@blaze_1fCoF4onMJE2jDLBViwynk
                      blaze-builder-0.4.0.2@blaze_5LQurmvTy7l9rPlWgPlNE4
                      blaze-markup-0.7.0.3@blaze_JGtgJgx8yqB3DdKuU3sbgD
                      byteable-0.1.1@bytea_38yjJsjDRm9KusCn8Yo4aB
                      byteorder-1.0.4@byteo_6yQGE3rJo3bBqr3CFoBQ27
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      case-insensitive-1.2.0.6@casei_8joO9kPGMysIcGsv22FmhM
                      cereal-0.5.1.0@cerea_843xOxvPj94HAJ9SD4EJuq
                      chunked-data-0.2.0@chunk_HKiZWSsQXUI8NRd6hQ6TVV
                      cipher-aes-0.2.11@ciphe_8XNwNKI71EdCLNQ4WGdMQq
                      classy-prelude-0.12.7@class_GBF7JSBo0plCRXbngNsKp9
                      clientsession-0.9.1.1@clien_AVdbyGIJ7T9ErselfZZbA0
                      comonad-4.2.7.2@comon_ANDyj4wNB0X1DshTxn1Ec7
                      conduit-1.2.6.4@condu_1EneW8yRsjj18l2EfcgLyu
                      conduit-extra-1.1.13.1@condu_LL5iAPCtVPDKng9tFMg5Hb
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      contravariant-1.4@contr_GjopTtscFPI3wCyb9R8zUx
                      cookie-0.4.2@cooki_2KXwrghoyuF9NsX9y32jXW
                      cprng-aes-0.6.1@cprng_2u7YznKAhBa0O1ealBphi6
                      crypto-random-0.0.9@crypt_AJfyg4kHZNC45ySSQXd0Fs
                      crypto-cipher-types-0.0.9@crypt_AkbdiYWeXYI5D4jAOMIXve
                      crypto-api-0.13.2@crypt_CQNHRIyJlsfHMn0dNcSIou
                      css-text-0.1.2.1@csste_DCmJgQlbndx5J1dp3gjSY0
                      data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe
                      data-default-0.5.3@datad_DLQPsKM7BNMFfKH45X8LEe
                      data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk
                      data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY
                      data-default-class-0.0.1@datad_K91y8NcZUJI9yaBI61rgdD
                      data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59
                      directory-1.2.2.0@direc_5xLaLBWdxVZAOIxWfpUWaS
                      distributive-0.5.0.2@distr_55SIdsoyihS4jXBaaVvPQX
                      dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui
                      dlist-instances-0.1@dlist_DzoO0ir6YuEEKWgnOxUPdi
                      easy-file-0.2.1@easyf_GcGMtzoDKuD2pK2mCRlsnY
                      email-validate-2.2.0@email_852PUaAoFuMCJCuSp1iWYg
                      enclosed-exceptions-1.0.1.1@enclo_61GxiLion2dCYbPqCQEfDj
                      entropy-0.3.7@entro_EWh32pHo6ClFU85Pc5o5Zm
                      exceptions-0.8.2.1@excep_6lgwjdgwblY7rzh5s6SLd8
                      fast-logger-2.4.5@fastl_7nc5veT1ru70oMPaALsf5H
                      filepath-1.4.0.0@filep_Ey7a1in9roBAE8bUFJ5R9m
                      free-4.12.4@free_6zsT0eU8oWW5hSQkbU0iac ghc-prim-0.4.0.0
                      hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I
                      http2-1.4.5@http2_GzA73Ug8iwP3zSpwyA2eS1
                      http-api-data-0.2.2@httpa_1uFN7J7hLDyBwXhp2kDzTJ
                      http-date-0.0.6.1@httpd_5DCnWjYhsQa9SYTqbDecLX
                      http-types-0.9@httpt_GVuxyBdW2yt88cWrjZfRWC integer-gmp-1.0.0.0
                      iproute-1.7.0@iprou_5YiIfU6WCAcBMsxnDjqUGz
                      kan-extensions-4.2.3@kanex_93YChxpKCPfJOIja4yoAht
                      keys-3.11@keys_K60lYwyibCxDqddDC3Eu8A
                      lifted-base-0.2.3.6@lifte_DoOvgrTvmEtENHs0ypaZTR
                      memory-0.11@memor_0EiEBIg44i8KGjAeoKnPDs
                      mmorph-1.0.6@mmorp_42KUkOfzC6q3qCtAMiSHam
                      monad-logger-0.3.18@monad_3jxCnbU4ujDIg3NmgNxnLU
                      monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS
                      monad-loops-0.4.3@monad_LQiHRUYhFhYBU7nOOWDOrb
                      mono-traversable-0.10.2@monot_5h7XStFjm8f0ymZC0lfQU0
                      mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB
                      mwc-random-0.13.4.0@mwcra_AyneHMCDDPEDUyD6tT09fC
                      network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67
                      network-2.6.2.1@netwo_JvRqUnCVngAETdubChvApm
                      old-locale-1.0.0.7@oldlo_7h2Gx6mVPJ5Gheca8j9Mpe
                      parsec-3.1.9@parse_7aUabKPjr5W6Al5Ge35AQl
                      path-pieces-0.2.1@pathp_Lp10P5C8Fin0ZqASzOIthS
                      persistent-2.2.4.1@persi_30NpaOgcztl8YGQyiWE7if
                      persistent-template-2.1.8@persi_FVL0pcKchjmDXaEo4Aank8
                      pointed-4.2.0.2@point_9sEXBlHmRToHa7d51W4kyh
                      prelude-extras-0.4.0.3@prelu_1gQpKVfMHul71LsAFgGRhv
                      pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC
                      primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3
                      process-1.2.3.0@proce_Ajz0vYuNBfwAXXdL8w1ZF3
                      profunctors-5.2@profu_3mp9Et5di2eBw26qSk1FvQ
                      psqueues-0.2.2.1@psque_AvLcbKUIB1yCm8wZoS0YR7
                      random-1.1@rando_7Qv4dDT5WBF9U3tMWkytIb
                      resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ
                      resource-pool-0.2.3.2@resou_1r4OqxStBqk98vFQfnJWRK
                      safe-0.3.9@safe_Eus5OohxO2XHvdWxKAmhFS
                      scientific-0.3.4.6@scien_5s26qRhE5w04kI4pP1Rtwm
                      securemem-0.1.9@secur_ArobkR9k7uwJiSXmFUrDYT
                      semigroups-0.18.1@semig_G8J7ers5FBV50jV0jAmDo0
                      semigroupoids-5.0.1@semig_GGZAZT6nvE937zJVPqetuF
                      shakespeare-2.0.8.2@shake_8gXHb19IeTk84iwLPkTzYr
                      silently-1.2.5@silen_5fGKA9VmFtp8NijBxHwbk7
                      skein-1.0.9.4@skein_4U21f5nRGfsI9HTEGSJVvt
                      split-0.2.3@split_CDzOynTh4l8Ahg1HaWUL4Z
                      stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD
                      stm-chans-3.0.0.4@stmch_4ac5OLG4E0w1rpuIDCribD
                      streaming-commons-0.1.15.4@strea_8w6POfMK7QeH13WNVYb6J4
                      stringsearch-0.3.6.6@strin_CAOAc0sCfAC9gi7YClo2KY
                      system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc
                      tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6
                      tagsoup-0.13.9@tagso_3I5x83DoCVBIz4INMBLU3R
                      template-haskell-2.10.0.0 text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne
                      time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz
                      time-locale-compat-0.1.1.1@timel_CVx5rIGuqIp24PzQC7WK9G
                      transformers-base-0.4.4@trans_74WedXVmfaHHDJItmBRTVp
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
                      unix-compat-0.4.1.4@unixc_GSzvajAFJ206qQW6omovGI
                      unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j
                      utf8-string-1.0.1.1@utf8s_L8eKHa7Iv9q7FVKUYW6u4b
                      vault-0.3.0.6@vault_8aId1RjvIBs9AcRd6Dlytd
                      vector-instances-3.3.1@vecto_845LIf6gX4KCXOevED3Jnk
                      vector-algorithms-0.7.0.1@vecto_Cvt7BuqQGBY4KnqdC10xbW
                      vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln
                      wai-3.2.1@wai_8QqtlS5lUYtJ1UzodVxIF7
                      wai-extra-3.0.15.1@waiex_9karCP93zuGA4GudL1QQhy
                      wai-logger-2.2.7@wailo_KOy9AxYpzF53Jf8LjxH48C
                      warp-3.2.2@warp_1WC36HxFuMbFyKXA3vbV7O
                      word8-0.1.2@word8_6yKBsGbmsbLB2UCORShr75
                      xss-sanitize-0.3.5.7@xsssa_1xOkYBWysHDFpCHMd3AfbR
                      yesod-form-1.4.7.1@yesod_Ds7rtrofv7XHcy14378iwS
                      yesod-persistent-1.4.0.5@yesod_DzrjzhBzbOdLFBv4q6oIky
                      yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH
                      yesod-1.4.3@yesod_L7ttxSYDVDF5tH5JsKPh3L
                      zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu
orphans: aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK:Data.Aeson.Types.Generic
         aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK:Data.Aeson.Types.Instances
         aeson-compat-0.3.2.0@aeson_9zXJFuZqzS1816Srcg2yr5:Data.Aeson.Compat
         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.Text.Internal
         base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         base-orphans-0.5.4@baseo_0gFtKFBT26OGSKHmmdqdfx:Data.Orphans
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         crypto-api-0.13.2@crypt_CQNHRIyJlsfHMn0dNcSIou:Crypto.Classes
         data-default-instances-base-0.0.1@datad_Bh5w1rt638k3gekgUnZ9Qe:Data.Default.Instances.Base
         data-default-instances-dlist-0.0.1@datad_IV2dTGx3Pj09NowR0FWGzk:Data.Default.Instances.DList
         data-default-instances-containers-0.0.1@datad_IvTKAI579b047LLJfQOYbY:Data.Default.Instances.Containers
         data-default-instances-old-locale-0.0.1@datad_LQTewb1b5hK22W4h2rIWVQ:Data.Default.Instances.OldLocale
         dlist-instances-0.1@dlist_DzoO0ir6YuEEKWgnOxUPdi:Data.DList.Instances
         hashable-1.2.4.0@hasha_EalUWgp8NarBYWPbvYAD8I:Data.Hashable.Generic
         network-2.6.2.1@netwo_JvRqUnCVngAETdubChvApm:Network.Socket
         network-2.6.2.1@netwo_JvRqUnCVngAETdubChvApm:Network.Socket.Types
         persistent-2.2.4.1@persi_30NpaOgcztl8YGQyiWE7if:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.2.4.1@persi_30NpaOgcztl8YGQyiWE7if:Database.Persist.Sql.Orphan.PersistStore
         persistent-2.2.4.1@persi_30NpaOgcztl8YGQyiWE7if:Database.Persist.Sql.Orphan.PersistUnique
         persistent-template-2.1.8@persi_FVL0pcKchjmDXaEo4Aank8:Database.Persist.TH
         stm-2.4.4.1@stm_EyxFXFfnfY05IrjGaqCxeD:Control.Monad.STM
         system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc:Filesystem.Path
         system-filepath-0.4.13.4@syste_0e3pMPmZzix21iFp2U03Lc:Filesystem.Path.CurrentOS
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Show
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.Calendar.Gregorian
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.Format.Parse
         time-1.5.0.1@time_IYbjC7tGONY15oDy1fGJKz:Data.Time.LocalTime.LocalTime
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
         vector-instances-3.3.1@vecto_845LIf6gX4KCXOevED3Jnk:Data.Vector.Instances
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Fusion.Bundle
         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjun_9cH29t7MfJW4aX0z24PvBh:Data.Functor.Rep
                         attoparsec-0.13.0.2@attop_41FU8li3hiTHrQHazQNzh3:Data.Attoparsec.Internal.Types
                         base-4.8.2.0:Control.Applicative base-4.8.2.0:Data.Either
                         base-4.8.2.0:Data.Functor.Identity base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:Data.Void
                         base-4.8.2.0:GHC.Exts base-4.8.2.0:GHC.Generics
                         base-4.8.2.0:GHC.TypeLits
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Biff
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Clown
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Flip
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Join
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Joker
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Product
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Sum
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Tannen
                         bifunctors-5.2@bifun_AiMzIElJnc7BX2vj1Bxgh2:Data.Bifunctor.Wrapped
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         dlist-0.7.1.2@dlist_AO7XAasbAeyL0XLKeq1Aui:Data.DList
                         email-validate-2.2.0@email_852PUaAoFuMCJCuSp1iWYg:Text.Email.Parser
                         iproute-1.7.0@iprou_5YiIfU6WCAcBMsxnDjqUGz:Data.IP.Addr
                         iproute-1.7.0@iprou_5YiIfU6WCAcBMsxnDjqUGz:Data.IP.Range
                         keys-3.11@keys_K60lYwyibCxDqddDC3Eu8A:Data.Key
                         monad-logger-0.3.18@monad_3jxCnbU4ujDIg3NmgNxnLU:Control.Monad.Logger
                         monad-control-1.0.1.0@monad_7Tqv3C2ASZP4J7swGaIkqS:Control.Monad.Trans.Control
                         mono-traversable-0.10.2@monot_5h7XStFjm8f0ymZC0lfQU0:Data.Containers
                         mono-traversable-0.10.2@monot_5h7XStFjm8f0ymZC0lfQU0:Data.MinLen
                         mono-traversable-0.10.2@monot_5h7XStFjm8f0ymZC0lfQU0:Data.MonoTraversable
                         mono-traversable-0.10.2@monot_5h7XStFjm8f0ymZC0lfQU0:Data.Sequences
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.BRef
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.Class
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.DLList
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.Deque
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.PRef
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.SRef
                         mutable-containers-0.3.2.1@mutab_FZ349UkRGF17pldYVOpmVB:Data.Mutable.URef
                         mwc-random-0.13.4.0@mwcra_AyneHMCDDPEDUyD6tT09fC:System.Random.MWC
                         network-uri-2.6.1.0@netwo_DarCcUHK1BCJHlIYOjXe67:Network.URI
                         persistent-2.2.4.1@persi_30NpaOgcztl8YGQyiWE7if:Database.Persist.Class.PersistConfig
                         persistent-2.2.4.1@persi_30NpaOgcztl8YGQyiWE7if:Database.Persist.Sql.Orphan.PersistStore
                         pretty-1.1.2.0@prett_JItwetRppk1H5Uq3xbjDGC:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primi_EphY2c7CCxSCBKjAN0YTR3:Control.Monad.Primitive
                         resourcet-1.1.7.3@resou_0TYP6GHqv9b1qNv0xS98eJ:Control.Monad.Trans.Resource.Internal
                         semigroups-0.18.1@semig_G8J7ers5FBV50jV0jAmDo0:Data.List.NonEmpty
                         semigroups-0.18.1@semig_G8J7ers5FBV50jV0jAmDo0:Data.Semigroup
                         shakespeare-2.0.8.2@shake_8gXHb19IeTk84iwLPkTzYr:Text.Css
                         shakespeare-2.0.8.2@shake_8gXHb19IeTk84iwLPkTzYr:Text.Shakespeare
                         tagged-0.8.4@tagge_LPeicl3HxVfGUMMwMEsAE6:Data.Tagged
                         template-haskell-2.10.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text
                         text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Lazy
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashMap.Base
                         unordered-containers-0.2.5.1@unord_Kh4ayEkEku2Hr3yyCwld2j:Data.HashSet
                         vector-instances-3.3.1@vecto_845LIf6gX4KCXOevED3Jnk:Data.Vector.Instances
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Primitive
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Storable
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed
                         vector-0.11.0.0@vecto_LmZ3LQW4ivu8MsQuVgukln:Data.Vector.Unboxed.Base
                         yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Class.Handler
                         yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Internal.LiteApp
                         yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Types
                         zlib-0.6.1.1@zlib_7LjT7TSHX8U3VTy3t378Vu:Codec.Compression.Zlib.Stream
import  -/  aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK:Data.Aeson f6f6baf777fe3051cde629b3c898057d
import  -/  aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK:Data.Aeson.Types.Class aa21576160f236f6cf4f637ebe7306e2
import  -/  aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK:Data.Aeson.Types.Instances f23ec1907404602a1d50504a17cc93f9
import  -/  aeson-0.9.0.1@aeson_4OshW3m404gL2QoOCTl4IK:Data.Aeson.Types.Internal 2ffa8e3222d1cfe07c59de3cfffcffa9
import  -/  base-4.8.2.0:Data.Tuple 012ad951a59a9d85fe1de36a2f012986
import  -/  base-4.8.2.0:GHC.Base a4939789b2cfd60b36ed163e56a623cd
import  -/  base-4.8.2.0:GHC.Generics 056599eb14f762c26f63272df8c7c07f
import  -/  base-4.8.2.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.2.0:GHC.Read b423b4506a014855edbd329b567629f3
import  -/  base-4.8.2.0:GHC.Real 1281efa9baf803bc7859d7efb89a38b3
import  -/  base-4.8.2.0:GHC.Show 0e1d8380a8fb0cfb07ebeda3b70cbf38
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.ParserCombinators.ReadPrec 2590e0e0a57a86ac7c62727f4d868dd2
import  -/  base-4.8.2.0:Text.Read.Lex 724ca44ddd38ddc5f47a501d62736c26
import  -/  blaze-html-0.8.1.1@blaze_1fCoF4onMJE2jDLBViwynk:Text.Blaze.Html ff50bb92adccaa8e785ebcf6abb43765
import  -/  blaze-markup-0.7.0.3@blaze_JGtgJgx8yqB3DdKuU3sbgD:Text.Blaze.Internal 3404a769f2c57c9f8279a91271fade4e
import  -/  classy-prelude-0.12.7@class_GBF7JSBo0plCRXbngNsKp9:ClassyPrelude e664dba72c27655bbfb8dd6c6bfc8068
import  -/  containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base 09c02931890cbe19c6c4cfd2f2af6665
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  path-pieces-0.2.1@pathp_Lp10P5C8Fin0ZqASzOIthS:Web.PathPieces 338f427045c0d43575d646795206b072
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text 8f3dc35509856356d0bb7e3d3a7122b9
import  -/  text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne:Data.Text.Internal 762ad762817f3041e69c24778b8286ab
import  -/  wai-3.2.1@wai_8QqtlS5lUYtJ1UzodVxIF7:Network.Wai.Internal ed48aac4475e786da9a789c1191ce108
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Class.Dispatch d0aaa545f98a3b140b5821cf774e2640
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Class.Yesod 9bcc19c0cdb81a6c9ea9c2e799ffb373
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Dispatch cc0bafb61068ebcb8106aaf30940aba7
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Handler a112f4fd8a1004d679dc3ca00f54a1d3
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Internal.Run 7139af68317425736acac0d51cdab228
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Internal.TH 2fbed508352a179b8e3354e9fdb8d9c0
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Json c4379ecb1c257c838d62d1819857b3bb
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Core.Types ae893458462b417a6f840deffa2e807a
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Routes.Class 4cef8c5c6095ec51163ef2d4e2e39f8d
import  -/  yesod-core-1.4.20.2@yesod_HrR8D0FQhfw9gf6Sc9WQhH:Yesod.Routes.TH.Types 621556877074705884251a223078ca9f
import  -/  yesod-1.4.3@yesod_L7ttxSYDVDF5tH5JsKPh3L:Yesod b3f3d4d459f8349d848ae8d2e555e022
bf4412b6da8a98e0847dc15e9cd2360b
  $fEqRoute :: GHC.Classes.Eq (Yesod.Routes.Class.Route Main.App)
  DFunId[0]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.App)
                  Main.$fEqRoute_$c==
                  Main.$fEqRoute_$c/= -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fEqRoute_$c/= ::
    Yesod.Routes.Class.Route Main.App
    -> Yesod.Routes.Class.Route Main.App -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ a50 :: Yesod.Routes.Class.Route Main.App
                   b :: Yesod.Routes.Class.Route Main.App ->
                 case Main.$fEqRoute_$c== a50 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fEqRoute_$c== ::
    Yesod.Routes.Class.Route Main.App
    -> Yesod.Routes.Class.Route Main.App -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ ds :: Yesod.Routes.Class.Route Main.App
                   ds1 :: Yesod.Routes.Class.Route Main.App ->
                 case ds `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild {
                   Main.TestR
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild1 {
                        DEFAULT -> GHC.Types.False Main.TestR -> GHC.Types.True }
                   Main.AddR a50 a51
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.AddR b1 b2
                        -> case a50 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a51 b2 } } } }
                   Main.SubR a50 a51
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.SubR b1 b2
                        -> case a50 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a51 b2 } } } }
                   Main.MultR a50 a51
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.MultR b1 b2
                        -> case a50 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a51 b2 } } } }
                   Main.DivR a50 a51
                   -> case ds1 `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.DivR b1 b2
                        -> case a50 of wild2 { GHC.Types.I# x ->
                           case b1 of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.==# x y) of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.eqInt a51 b2 } } } } }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fParseRouteApp :: Yesod.Routes.Class.ParseRoute Main.App
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.App
                  Main.$fRenderRouteApp
                  Main.$fParseRouteApp_$cparseRoute -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fParseRouteApp_$cparseRoute ::
    ([Data.Text.Internal.Text],
     [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,A)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: ([Data.Text.Internal.Text],
                         [(Data.Text.Internal.Text, Data.Text.Internal.Text)]) ->
                 case w of ww { (,) ww1 ww2 -> Main.$w$cparseRoute ww1 }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute :: GHC.Read.Read (Yesod.Routes.Class.Route Main.App)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.App)
                  Main.$fReadRoute_$s$dmreadsPrec
                  Main.$fReadRoute_$sreadListDefault
                  Main.$fReadRoute_$creadPrec
                  Main.$fReadRoute_$creadListPrec -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Yesod.Routes.Class.Route Main.App]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ eta :: Text.ParserCombinators.ReadPrec.Prec
                   @ b
                   eta1 :: [Yesod.Routes.Class.Route Main.App]
                           -> Text.ParserCombinators.ReadP.P b ->
                 GHC.Read.$wa
                   @ (Yesod.Routes.Class.Route Main.App)
                   Main.$fReadRoute2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                             <Yesod.Routes.Class.Route Main.App>_R))
                   @ b
                   eta1) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Yesod.Routes.Class.Route Main.App)
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ (Yesod.Routes.Class.Route Main.App)
                   Main.$fReadRoute3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                       <Yesod.Routes.Class.Route Main.App>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                                  <Yesod.Routes.Class.Route Main.App>_R)))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Yesod.Routes.Class.Route Main.App
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,1*U(U)><L,C(U)> -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Yesod.Routes.Class.Route Main.App]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                                    <[Yesod.Routes.Class.Route Main.App]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                               <[Yesod.Routes.Class.Route Main.App]>_R))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Yesod.Routes.Class.Route Main.App)
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadRoute2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <Yesod.Routes.Class.Route Main.App>_R)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute_$s$dmreadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Yesod.Routes.Class.Route Main.App)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (-1, True, False)
                (\ eta :: GHC.Types.Int ->
                 Text.ParserCombinators.ReadPrec.readPrec_to_S
                   @ (Yesod.Routes.Class.Route Main.App)
                   Main.$fReadRoute_$creadPrec
                   eta) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fReadRoute_$sreadListDefault ::
    Text.ParserCombinators.ReadP.ReadS
      [Yesod.Routes.Class.Route Main.App]
  {- Arity: 1,
     Unfolding: InlineRule (0, True, False)
                (Text.ParserCombinators.ReadP.run
                   @ [Yesod.Routes.Class.Route Main.App]
                   ((Main.$fReadRoute_$creadListPrec
                       `cast`
                     (Text.ParserCombinators.ReadPrec.NTCo:ReadPrec[0]
                          <[Yesod.Routes.Class.Route Main.App]>_R)
                       GHC.Read.$fRead(,)7)
                      `cast`
                    (Text.ParserCombinators.ReadP.NTCo:ReadP[0]
                         <[Yesod.Routes.Class.Route Main.App]>_R)
                      @ [Yesod.Routes.Class.Route Main.App]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$creturn
                         @ [Yesod.Routes.Class.Route Main.App]))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fRenderRouteApp :: Yesod.Routes.Class.RenderRoute Main.App
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.App Main.$fEqRoute Main.$fRenderRouteApp_$crenderRoute -}
8b584850206592af1320dd515444c172
  $fRenderRouteApp1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "div"#) -}
9038ddf00b62704ed014c7ba1997bfa8
  $fRenderRouteApp2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "mult"#) -}
c13db40ac23c26e809669092c5cd5c2a
  $fRenderRouteApp3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "sub"#) -}
f7fea608da1bc174de325ffaa49eff12
  $fRenderRouteApp4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "add"#) -}
51abfd53a1d8b4876575da8329658442
  $fRenderRouteApp5 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.$fRenderRouteApp6
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
215ccdad8cc491a54e74ced2dc4e0bee
  $fRenderRouteApp6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "test"#) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fRenderRouteApp_$crenderRoute ::
    Yesod.Routes.Class.Route Main.App
    -> ([Data.Text.Internal.Text],
        [(Data.Text.Internal.Text, Data.Text.Internal.Text)])
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Yesod.Routes.Class.Route Main.App ->
                 case Main.$w$crenderRoute w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fRouteAttrsApp :: Yesod.Routes.Class.RouteAttrs Main.App
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.App
                  Main.$fRenderRouteApp
                  Main.$fRouteAttrsApp_$crouteAttrs -}
7be074db9cff6c1f72b630dc1c2ffe47
  $fRouteAttrsApp1 :: Data.Set.Base.Set Data.Text.Internal.Text
  {- Unfolding: (Main.$fRouteAttrsApp_$sfromList
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fRouteAttrsApp_$crouteAttrs ::
    Yesod.Routes.Class.Route Main.App
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Yesod.Routes.Class.Route Main.App ->
                 case ds of tpl { DEFAULT -> Main.$fRouteAttrsApp1 }) -}
23fa0d8b05df6fbab8410ab149ca440e
  $fRouteAttrsApp_$sfromList ::
    [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ ds :: [Data.Text.Internal.Text] ->
                 case ds of wild {
                   [] -> Data.Set.Base.Tip @ Data.Text.Internal.Text
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Base.Bin
                             @ Data.Text.Internal.Text
                             1
                             dt
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Base.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Main.$fRouteAttrsApp_go5
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  wild1
                             GHC.Types.LT
                             -> Main.$wgo5
                                  1
                                  (Data.Set.Base.Bin
                                     @ Data.Text.Internal.Text
                                     1
                                     ww
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Base.Tip @ Data.Text.Internal.Text))
                                  wild1 } } } } }) -}
ab81e4fd342f3b20b2891c08ffd907a3
  $fRouteAttrsApp_go5 ::
    Data.Set.Base.Set Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fShowRoute :: GHC.Show.Show (Yesod.Routes.Class.Route Main.App)
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Routes.Class.Route Main.App)
                  Main.$fShowRoute_$cshowsPrec
                  Main.$fShowRoute_$cshow
                  Main.$fShowRoute_$cshowList -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fShowRoute1 :: Yesod.Routes.Class.Route Main.App -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Main.$fShowRoute_$cshowsPrec Main.$fShowRoute2) -}
57dfc9350d7c6e91788cb15bddabd397
  $fShowRoute2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fShowRoute_$cshow ::
    Yesod.Routes.Class.Route Main.App -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Yesod.Routes.Class.Route Main.App ->
                 Main.$fShowRoute_$cshowsPrec
                   GHC.Show.shows18
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fShowRoute_$cshowList ::
    [Yesod.Routes.Class.Route Main.App] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ (Yesod.Routes.Class.Route Main.App)
                   Main.$fShowRoute1) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fShowRoute_$cshowsPrec ::
    GHC.Types.Int
    -> Yesod.Routes.Class.Route Main.App -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
efb0c087f4d4a2baa6a921d47dadf34c
  $fToJSONPerson :: Data.Aeson.Types.Class.ToJSON Main.Person
  DFunId[0]
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U))>m1,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Main.$fToJSONPerson_$ctoJSON
                  `cast`
                (Sym (Data.Aeson.Types.Class.NTCo:ToJSON[0] <Main.Person>_N)) -}
caf24f29603362651135ab378a376092
  $fToJSONPerson1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "age"#) -}
dfb88ee8a35a757d9b083ee1ab82daa1
  $fToJSONPerson2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "name"#) -}
efb0c087f4d4a2baa6a921d47dadf34c
  $fToJSONPerson_$ctoJSON ::
    Main.Person -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(U,1*U(U))>m1, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Main.Person ->
                 case w of ww { Main.Person ww1 ww2 ->
                 case Main.$w$ctoJSON ww1 ww2 of ww3 { (##) ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp :: Yesod.Core.Class.Yesod.Yesod Main.App
  DFunId[0]
  {- Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.App
                  Main.$fRenderRouteApp
                  Main.$fYesodApp_$s$dmapproot
                  Main.$fYesodApp_$cerrorHandler
                  Main.$fYesodApp_$cdefaultLayout
                  Main.$fYesodApp_$s$dmurlRenderOverride
                  Main.$fYesodApp_$cisAuthorized
                  Main.$fYesodApp_$cisWriteRequest
                  Main.$fYesodApp_$s$dmauthRoute
                  Main.$fYesodApp_$ccleanPath
                  Main.$fYesodApp_$cjoinPath
                  Main.$fYesodApp_$caddStaticContent
                  Main.$fYesodApp_$s$dmmaximumContentLength
                  Main.$fYesodApp_$cmakeLogger
                  Main.$fYesodApp_$cmessageLoggerSource
                  Main.$fYesodApp_$s$dmjsLoader
                  Main.$fYesodApp_$cmakeSessionBackend
                  Main.$fYesodApp_$cfileUpload
                  Main.$fYesodApp_$s$dmshouldLog
                  Main.$fYesodApp_$cshouldLogIO
                  Main.$fYesodApp_$cyesodMiddleware
                  Main.$fYesodApp_$cyesodWithInternalState -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp1 ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.App GHC.Types.IO res
    -> Yesod.Core.Types.HandlerData
         Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ res
                   w :: Yesod.Core.Content.ToTypedContent res
                   w1 :: Yesod.Core.Types.HandlerT Main.App GHC.Types.IO res
                   w2 :: Yesod.Core.Types.HandlerData
                           Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w2 of ww { Yesod.Core.Types.HandlerData ww1 ww2 ww3 ww4 ww5 ->
                 Main.$wa @ res w1 ww1 ww2 ww3 ww4 ww5 w3 }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp10 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerData
         Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.App,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (5, True, True)
                (\ ds :: Data.Text.Internal.Text
                   ds1 :: Data.Text.Internal.Text
                   ds2 :: Data.ByteString.Lazy.Internal.ByteString
                   eta :: Yesod.Core.Types.HandlerData
                            Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1,
                    GHC.Base.Nothing
                      @ (Data.Either.Either
                           Data.Text.Internal.Text
                           (Yesod.Routes.Class.Route Main.App,
                            [(Data.Text.Internal.Text, Data.Text.Internal.Text)])) #)) -}
543024e0b83a504e58595c276b7be6f2
  $fYesodApp11 :: Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1 -}
e3e13faf0152ff95ed0b7d8454c1dfdc
  $fYesodApp12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
ae37705aa86c59aae25f475c4a7243b7
  $fYesodApp13 ::
    (Data.Text.Internal.Text, Data.Text.Internal.Text)
    -> (Data.ByteString.Internal.ByteString,
        GHC.Base.Maybe Data.ByteString.Internal.ByteString)
  {- Arity: 1,
     Unfolding: (\ ds :: (Data.Text.Internal.Text,
                          Data.Text.Internal.Text) ->
                 (case ds of wild { (,) x y -> Data.Text.Encoding.encodeUtf8 x },
                  case ds of wild { (,) x y ->
                  case y of wild1 { Data.Text.Internal.Text dt1 dt2 dt3 ->
                  case Data.Text.Internal.empty_ of wild2 { Data.Text.Internal.Text dt4 dt5 dt6 ->
                  case GHC.Prim.tagToEnum#
                         @ GHC.Types.Bool
                         (GHC.Prim.==# dt3 dt6) of wild3 {
                    GHC.Types.False
                    -> GHC.Base.Just
                         @ Data.ByteString.Internal.ByteString
                         (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                    GHC.Types.True
                    -> case {__pkg_ccall text-1.2.2.1@text_HmqVQnZSpjaC156ABqPhne _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.Word#
                                                                                                  -> GHC.Prim.State#
                                                                                                       GHC.Prim.RealWorld
                                                                                                  -> (# GHC.Prim.State#
                                                                                                          GHC.Prim.RealWorld,
                                                                                                        GHC.Prim.Int# #)}
                              dt1
                              (GHC.Prim.int2Word# dt2)
                              dt4
                              (GHC.Prim.int2Word# dt5)
                              (GHC.Prim.int2Word# dt3)
                              GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                       case GHC.Prim.narrow32Int# ds12 of wild5 {
                         DEFAULT
                         -> GHC.Base.Just
                              @ Data.ByteString.Internal.ByteString
                              (Data.Text.Encoding.$wencodeUtf8 dt1 dt2 dt3)
                         0
                         -> GHC.Base.Nothing
                              @ Data.ByteString.Internal.ByteString } } } } } })) -}
8b2cffd2a4439571f59400733d5e1d88
  $fYesodApp14 :: Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1,
     Unfolding: (\ t :: Data.Text.Internal.Text ->
                 case t of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 let {
                   a50 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                 } in
                 letrec {
                   $wloop_all :: GHC.Prim.Int# -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                   = \ ww :: GHC.Prim.Int# ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww a50) of wild1 {
                       GHC.Types.False
                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.geWord# r# __word 55296) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                 DEFAULT -> GHC.Types.False '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                            GHC.Types.True
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                 GHC.Types.False
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 1) }
                                 GHC.Types.True
                                 -> case GHC.Prim.indexWord16Array#
                                           dt
                                           (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                    10)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                              65536) of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      '-' -> $wloop_all (GHC.Prim.+# ww 2) } } } } }
                       GHC.Types.True -> GHC.Types.True }
                 } in
                 case $wloop_all dt1 of wild1 {
                   GHC.Types.False -> wild
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# 1 dt2) of wild3 {
                        GHC.Types.False
                        -> case Data.Text.$witerN
                                  Main.$fYesodApp15
                                  dt
                                  dt1
                                  dt2 of ww4 { DEFAULT ->
                           case GHC.Prim.-# dt2 ww4 of wild5 {
                             DEFAULT -> Data.Text.Internal.Text dt (GHC.Prim.+# dt1 ww4) wild5
                             0 -> Data.Text.Internal.empty } }
                        GHC.Types.True -> Data.Text.Internal.empty } } }) -}
46fb167719482c2207f9e88c8f568efa
  $fYesodApp15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
2ae1578a6183de2cd646e8a93734295f
  $fYesodApp16 :: Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Data.Text.Internal.Text ->
                 case x of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# dt2 0) of wild1 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp17 ::
    Yesod.Core.Types.HandlerData
      Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 2,
     Unfolding: (\ r :: Yesod.Core.Types.HandlerData
                          Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case (Main.$fYesodApp26
                         `cast`
                       (Yesod.Core.Types.NTCo:HandlerT[0]
                            <Main.App>_N <GHC.Types.IO>_N <Network.Wai.Internal.Request>_N)
                         r)
                        `cast`
                      (GHC.Types.NTCo:IO[0] <Network.Wai.Internal.Request>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    case GHC.List.elem
                           @ Network.HTTP.Types.Method.Method
                           Data.ByteString.Internal.$fEqByteString
                           (case ipv1 of wild { Network.Wai.Internal.Request ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ->
                            ds2 })
                           Main.$fYesodApp18 of wild {
                      GHC.Types.False -> GHC.Types.True
                      GHC.Types.True -> GHC.Types.False } #) }) -}
bbfcd01e5785423c6397f8f3d7f8486f
  $fYesodApp18 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodApp25
                   Main.$fYesodApp19) -}
9d363dc68c2b691cf55303958b0d3b25
  $fYesodApp19 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodApp24
                   Main.$fYesodApp20) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp2 ::
    Main.App
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ a129 :: Main.App
                   b :: Control.Monad.Logger.LogSource
                   c :: Control.Monad.Logger.LogLevel
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Class.Yesod.defaultShouldLog b c #)) -}
03844955fa8378eda3cad28a49c74b88
  $fYesodApp20 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodApp23
                   Main.$fYesodApp21) -}
88a977b7e1dac47637e12e20eca4979e
  $fYesodApp21 :: [Network.HTTP.Types.Method.Method]
  {- Unfolding: (GHC.Types.:
                   @ Network.HTTP.Types.Method.Method
                   Main.$fYesodApp22
                   (GHC.Types.[] @ Network.HTTP.Types.Method.Method)) -}
d731160563821e3ea965a6fd7989c74b
  $fYesodApp22 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "TRACE"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
360de09db60074a2dcf9a809e85d2de1
  $fYesodApp23 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "OPTIONS"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
da2cccce65f50c26e82e6e4678fefe44
  $fYesodApp24 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "HEAD"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
2aef45917b69f7d83f027223cf8bdfdc
  $fYesodApp25 :: Network.HTTP.Types.Method.Method
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr# = "GET"#
                 } in
                 case {__pkg_ccall bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6 strlen GHC.Prim.Addr#
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0
                   (GHC.Prim.word2Int# ds4) } }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp26 ::
    Yesod.Core.Types.HandlerT
      Main.App GHC.Types.IO Network.Wai.Internal.Request
  {- Unfolding: (Yesod.Core.Handler.waiRequest
                   @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                   Main.$fYesodApp_$s$fMonadHandlerHandlerT) -}
12da5e5b1ddf99e31e0544668838058f
  $fYesodApp27 ::
    Control.Monad.Trans.Resource.MonadResourceBase GHC.Types.IO
  {- Strictness: m,
     Unfolding: ((Control.Monad.Trans.Control.$fMonadBaseControlIOIO,
                  Control.Monad.Catch.$fMonadThrowIO,
                  Control.Monad.Base.$fMonadBaseIOIO,
                  Control.Monad.IO.Class.$fMonadIOIO,
                  GHC.Base.$fApplicativeIO)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp28 ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp_$s$fMonadResourceHandlerT -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp29 ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp_$s$fMonadBasebHandlerT -}
fea9466c54e8595faf70b2a5de5fb5e0
  $fYesodApp3 :: Yesod.Core.Types.FileUpload
  {- Strictness: m1,
     Unfolding: (Yesod.Core.Types.FileUploadMemory Main.$fYesodApp4) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp30 ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp_$s$fMonadHandlerT -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp31 ::
    GHC.Base.String
    -> Yesod.Core.Types.HandlerT Main.App GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ a50 eta :: [GHC.Types.Char] ->
                 GHC.Err.error
                   @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO a50)
                   eta) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp32 ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp_$s$fApplicativeHandlerT -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp33 ::
    GHC.Base.Functor (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (Yesod.Core.Handler.$s$fFunctorHandlerT @ Main.App) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp34 ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp_$s$fMonadIOHandlerT -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp35 ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp_$s$fMonadThrowHandlerT -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp36 ::
    Yesod.Routes.Class.Route Main.App
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerData
         Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.AuthResult #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (4, True, True)
                (\ ds :: Yesod.Routes.Class.Route Main.App
                   ds1 :: GHC.Types.Bool
                   eta :: Yesod.Core.Types.HandlerData
                            Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (# eta1, Yesod.Core.Types.Authorized #)) -}
33c602fa3480f9bab9bd59c416b6ff07
  $fYesodApp4 ::
    Data.ByteString.Internal.ByteString
    -> Network.Wai.Parse.FileInfo ()
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> GHC.Types.IO Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 3, Strictness: <L,A><L,A><L,U>,
     Unfolding: InlineRule (3, True, True)
                (\ w1 :: Data.ByteString.Internal.ByteString
                   w2 :: Network.Wai.Parse.FileInfo ()
                   w3 :: GHC.Types.IO Data.ByteString.Internal.ByteString ->
                 Network.Wai.Parse.$wlbsBackEnd
                   @ Data.ByteString.Internal.ByteString
                   @ (Network.Wai.Parse.FileInfo ())
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   w3) -}
52342c0fc4840312f8c7e6ba2b433e2f
  $fYesodApp5 :: Yesod.Core.Types.FileUpload
  {- Strictness: m2,
     Unfolding: (Yesod.Core.Types.FileUploadDisk
                   (Network.Wai.Parse.tempFileBackEnd1
                      @ Data.ByteString.Internal.ByteString
                      @ (Network.Wai.Parse.FileInfo ()))
                     `cast`
                   (<Control.Monad.Trans.Resource.InternalState>_R
                    ->_R <Data.ByteString.Internal.ByteString>_R
                    ->_R <Network.Wai.Parse.FileInfo ()>_R
                    ->_R <GHC.Types.IO Data.ByteString.Internal.ByteString>_R
                    ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.IO.FilePath>_R))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp6 ::
    Main.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 2, Strictness: <L,A><L,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.App
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa1 w1) -}
9c79a0536e97bda14703efd6a552f16a
  $fYesodApp7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (__integer 7200000000000000) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp8 ::
    Main.App
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (7, True, True)
                (\ w :: Main.App
                   w1 :: Yesod.Core.Types.Logger
                   w2 :: Language.Haskell.TH.Syntax.Loc
                   w3 :: Control.Monad.Logger.LogSource
                   w4 :: Control.Monad.Logger.LogLevel
                   w5 :: System.Log.FastLogger.LogStr.LogStr
                   w6 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$wa2 w1 w2 w3 w4 w5 w6) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp9 ::
    Main.App
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Yesod.Core.Types.Logger #)
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ ds :: Main.App
                   eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Yesod.Core.Class.Yesod.defaultMakeLogger1 eta) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$caddStaticContent ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Data.ByteString.Lazy.Internal.ByteString
    -> Yesod.Core.Types.HandlerT
         Main.App
         GHC.Types.IO
         (GHC.Base.Maybe
            (Data.Either.Either
               Data.Text.Internal.Text
               (Yesod.Routes.Class.Route Main.App,
                [(Data.Text.Internal.Text, Data.Text.Internal.Text)])))
  {- Arity: 5, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp10
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Data.ByteString.Lazy.Internal.ByteString>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0]
                                         <GHC.Base.Maybe
                                            (Data.Either.Either
                                               Data.Text.Internal.Text
                                               (Yesod.Routes.Class.Route Main.App,
                                                [(Data.Text.Internal.Text,
                                                  Data.Text.Internal.Text)]))>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.App>_N
                                    <GHC.Types.IO>_N
                                    <GHC.Base.Maybe
                                       (Data.Either.Either
                                          Data.Text.Internal.Text
                                          (Yesod.Routes.Class.Route Main.App,
                                           [(Data.Text.Internal.Text,
                                             Data.Text.Internal.Text)]))>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$ccleanPath ::
    Main.App
    -> [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,A><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.App w1 :: [Data.Text.Internal.Text] ->
                 Main.$w$ccleanPath w1) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cdefaultLayout ::
    Yesod.Core.Types.WidgetT Main.App GHC.Types.IO ()
    -> Yesod.Core.Types.HandlerT
         Main.App GHC.Types.IO Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,U> -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cerrorHandler ::
    Yesod.Core.Types.ErrorResponse
    -> Yesod.Core.Types.HandlerT
         Main.App GHC.Types.IO Yesod.Core.Types.TypedContent
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cfileUpload ::
    Main.App
    -> Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 2, Strictness: <L,A><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, True)
                (\ w :: Main.App w1 :: Network.Wai.Internal.RequestBodyLength ->
                 Main.$w$cfileUpload w1) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cisAuthorized ::
    Yesod.Routes.Class.Route Main.App
    -> GHC.Types.Bool
    -> Yesod.Core.Types.HandlerT
         Main.App GHC.Types.IO Yesod.Core.Types.AuthResult
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp36
                  `cast`
                (<Yesod.Routes.Class.Route Main.App>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.AuthResult>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.App>_N
                                    <GHC.Types.IO>_N
                                    <Yesod.Core.Types.AuthResult>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cisWriteRequest ::
    Yesod.Routes.Class.Route Main.App
    -> Yesod.Core.Types.HandlerT Main.App GHC.Types.IO GHC.Types.Bool
  {- Arity: 3, Strictness: <L,A>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, True)
                (\ w :: Yesod.Routes.Class.Route Main.App
                   eta :: Yesod.Core.Types.HandlerData
                            Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 Main.$fYesodApp17 eta eta1)
                  `cast`
                (<Yesod.Routes.Class.Route Main.App>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.App>_N <GHC.Types.IO>_N <GHC.Types.Bool>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cjoinPath ::
    Main.App
    -> Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 4, Strictness: <L,A><L,1*U(U,U,U)><L,1*U><L,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ w :: Main.App
                   w1 :: Data.Text.Internal.Text
                   w2 :: [Data.Text.Internal.Text]
                   w3 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 Main.$w$cjoinPath w1 w2 w3) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cmakeLogger ::
    Main.App -> GHC.Types.IO Yesod.Core.Types.Logger
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp9
                  `cast`
                (<Main.App>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <Yesod.Core.Types.Logger>_R)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cmakeSessionBackend ::
    Main.App
    -> GHC.Types.IO (GHC.Base.Maybe Yesod.Core.Types.SessionBackend)
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp6
                  `cast`
                (<Main.App>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0]
                               <GHC.Base.Maybe Yesod.Core.Types.SessionBackend>_R)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cmessageLoggerSource ::
    Main.App
    -> Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Types.IO ()
  {- Arity: 7,
     Strictness: <L,A><L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp8
                  `cast`
                (<Main.App>_R
                 ->_R <Yesod.Core.Types.Logger>_R
                 ->_R <Language.Haskell.TH.Syntax.Loc>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R <System.Log.FastLogger.LogStr.LogStr>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cshouldLogIO ::
    Main.App
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.IO GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,A><L,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp2
                  `cast`
                (<Main.App>_R
                 ->_R <Control.Monad.Logger.LogSource>_R
                 ->_R <Control.Monad.Logger.LogLevel>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Bool>_R)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cyesodMiddleware ::
    Yesod.Core.Content.ToTypedContent res =>
    Yesod.Core.Types.HandlerT Main.App GHC.Types.IO res
    -> Yesod.Core.Types.HandlerT Main.App GHC.Types.IO res
  {- Arity: 4,
     Strictness: <L,A><L,1*C1(C1(U(U,U)))><S(SSLSL),1*U(U,U,U,U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fYesodApp1
                  `cast`
                (forall res.
                 <Yesod.Core.Content.ToTypedContent res>_R
                 ->_R <Yesod.Core.Types.HandlerT Main.App GHC.Types.IO res>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <res>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.App>_N <GHC.Types.IO>_N <res>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$cyesodWithInternalState ::
    Main.App
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)
    -> (Control.Monad.Trans.Resource.InternalState -> GHC.Types.IO a)
    -> GHC.Types.IO a
  {- Arity: 4, Strictness: <L,A><L,A><L,1*C1(C1(U))><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ @ a129
                   ds :: Main.App
                   ds1 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)
                   eta1 :: Control.Monad.Trans.Resource.InternalState
                           -> GHC.Types.IO a129
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (Control.Exception.Base.bracket
                    @ Control.Monad.Trans.Resource.InternalState
                    @ ()
                    @ a129
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$screateInternalState
                    Yesod.Core.Class.Yesod.$dmyesodWithInternalState_$scloseInternalState
                    eta1)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a129>_R)
                   eta2)
                  `cast`
                (forall a129.
                 <Main.App>_R
                 ->_R <GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)>_R
                 ->_R <Control.Monad.Trans.Resource.InternalState
                       -> GHC.Types.IO a129>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <a129>_R)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$dmapproot :: Yesod.Core.Types.Approot Main.App
  {- HasNoCafRefs,
     Unfolding: InlineRule (-1, True, True)
                (Yesod.Core.Types.ApprootRelative @ Main.App) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$dmauthRoute ::
    Main.App -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.App ->
                 GHC.Base.Nothing @ (Yesod.Routes.Class.Route Main.App)) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$dmjsLoader ::
    Main.App -> Yesod.Core.Types.ScriptLoadPosition Main.App
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.App -> Yesod.Core.Types.BottomOfBody @ Main.App) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$dmmaximumContentLength ::
    Main.App
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)
    -> GHC.Base.Maybe GHC.Word.Word64
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>m2,
     Unfolding: InlineRule (-1, True, False)
                (\ ds :: Main.App
                   ds1 :: GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App) ->
                 GHC.Base.$
                   @ GHC.Word.Word64
                   @ (GHC.Base.Maybe GHC.Word.Word64)
                   (GHC.Base.Just @ GHC.Word.Word64)
                   (GHC.Word.$fNumWord64_$c*
                      (GHC.Word.$fNumWord64_$c*
                         (GHC.Word.$fBitsWord64_$cfromInteger __integer 2)
                         (GHC.Word.$fBitsWord64_$cfromInteger __integer 1024))
                      (GHC.Word.$fBitsWord64_$cfromInteger __integer 1024))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$dmshouldLog ::
    Main.App
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.App
                   eta1 :: Control.Monad.Logger.LogSource
                   eta2 :: Control.Monad.Logger.LogLevel ->
                 Yesod.Core.Class.Yesod.defaultShouldLog eta1 eta2) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$dmurlRenderOverride ::
    Main.App
    -> Yesod.Routes.Class.Route Main.App
    -> GHC.Base.Maybe Data.ByteString.Builder.Internal.Builder
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (-1, True, True)
                (\ ds :: Main.App ds1 :: Yesod.Routes.Class.Route Main.App ->
                 GHC.Base.Nothing @ Data.ByteString.Builder.Internal.Builder) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fApplicativeHandlerT ::
    GHC.Base.Applicative
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  Main.$fYesodApp33
                  Main.$fYesodApp_$s$fApplicativeHandlerT_$cpure
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*>
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c*>
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp33
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fApplicativeHandlerT_$c<*
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp33
                     GHC.Base.$fMonadIO) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fApplicativeHandlerT_$cpure ::
    a -> Yesod.Core.Types.HandlerT Main.App GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a50
                   eta :: a50
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.Base.returnIO @ a50 eta) `cast` (GHC.Types.NTCo:IO[0] <a50>_R)
                   eta2)
                  `cast`
                (forall a50.
                 <a50>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a50>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.App>_N <GHC.Types.IO>_N <a50>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadBasebHandlerT ::
    Control.Monad.Base.MonadBase
      GHC.Types.IO (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ GHC.Types.IO
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  GHC.Base.$fApplicativeIO
                  Main.$fYesodApp32
                  GHC.Base.$fMonadIO
                  Main.$fYesodApp30
                  Main.$fYesodApp_$s$fMonadBasebHandlerT_$cliftBase -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadBasebHandlerT_$cliftBase ::
    GHC.Types.IO α -> Yesod.Core.Types.HandlerT Main.App GHC.Types.IO α
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,A>,
     Unfolding: InlineRule (1, True, False)
                (\ @ α eta :: GHC.Types.IO α ->
                 let {
                   eta1 :: GHC.Types.IO α = GHC.Base.id @ (GHC.Types.IO α) eta
                 } in
                 (\ ds :: Yesod.Core.Types.HandlerData
                            Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO) ->
                  eta1)
                   `cast`
                 (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                           <Main.App>_N <GHC.Types.IO>_N <α>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadHandlerHandlerT ::
    Yesod.Core.Class.Handler.MonadHandler
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  Main.$fYesodApp28
                  (Yesod.Core.Class.Handler.$fMonadHandlerHandlerT_$cliftHandlerT
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp28
                     Main.$fYesodApp27) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadHandlerT ::
    GHC.Base.Monad (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  Main.$fYesodApp32
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>=
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp32
                     GHC.Base.$fMonadIO)
                  (Yesod.Core.Types.$fMonadHandlerT_$c>>
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp32
                     GHC.Base.$fMonadIO)
                  Main.$fYesodApp_$s$fApplicativeHandlerT_$cpure
                  Main.$fYesodApp31 -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadIOHandlerT ::
    Control.Monad.IO.Class.MonadIO
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  Main.$fYesodApp30
                  Main.$fYesodApp_$s$fMonadBasebHandlerT_$cliftBase -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadResourceHandlerT ::
    Control.Monad.Trans.Resource.Internal.MonadResource
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  Main.$fYesodApp35
                  Main.$fYesodApp34
                  Main.$fYesodApp32
                  Main.$fYesodApp29
                  (Yesod.Core.Types.$fMonadResourceHandlerT_$cliftResourceT
                     @ Main.App
                     @ GHC.Types.IO
                     Main.$fYesodApp35
                     Main.$fYesodApp34
                     Main.$fYesodApp32
                     Main.$fYesodApp29
                     Control.Monad.IO.Class.$fMonadIOIO
                     Control.Monad.Base.$fMonadBaseIOIO
                     Control.Monad.Catch.$fMonadThrowIO) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadThrowHandlerT ::
    Control.Monad.Catch.MonadThrow
      (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Yesod.Core.Types.HandlerT Main.App GHC.Types.IO)
                  Main.$fYesodApp30
                  Main.$fYesodApp_$s$fMonadThrowHandlerT_$cthrowM -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodApp_$s$fMonadThrowHandlerT_$cthrowM ::
    GHC.Exception.Exception e =>
    e -> Yesod.Core.Types.HandlerT Main.App GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,U>b,
     Unfolding: InlineRule (1, True, True)
                (\ @ e
                   @ a50
                   eta :: GHC.Exception.Exception e
                   x :: e
                   eta1 :: Yesod.Core.Types.HandlerData
                             Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)
                   eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 (GHC.IO.throwIO @ e @ a50 eta x)
                   `cast`
                 (GHC.Types.NTCo:IO[0] <a50>_R)
                   eta2)
                  `cast`
                (forall e a50.
                 <GHC.Exception.Exception e>_R
                 ->_R <e>_R
                 ->_R Trans
                          (<Yesod.Core.Types.HandlerData
                              Main.App (Yesod.Core.Types.MonadRoute GHC.Types.IO)>_R
                           ->_R Sym (GHC.Types.NTCo:IO[0] <a50>_R))
                          (Sym (Yesod.Core.Types.NTCo:HandlerT[0]
                                    <Main.App>_N <GHC.Types.IO>_N <a50>_N))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodDispatchApp ::
    Yesod.Core.Class.Dispatch.YesodDispatch Main.App
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.App
                  Main.$fYesodApp
                  Main.$fYesodDispatchApp_$cyesodDispatch -}
bf4412b6da8a98e0847dc15e9cd2360b
  $fYesodDispatchApp_$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.App -> Network.Wai.Application
  {- Arity: 2,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><S(LLLLLLLSLLLLLLLL),1*U(U(U,U,U,U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: Yesod.Core.Types.YesodRunnerEnv Main.App
                   w1 :: Network.Wai.Internal.Request ->
                 case w1 of ww { Network.Wai.Internal.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Main.$w$cyesodDispatch
                   w
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 }) -}
0e0afef12d034ccf8e8b8344ee510c3b
  $w$ccleanPath ::
    [Data.Text.Internal.Text]
    -> Data.Either.Either
         [Data.Text.Internal.Text] [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ w :: [Data.Text.Internal.Text] ->
                 let {
                   corrected :: [Data.Text.Internal.Text]
                   = GHC.List.filter @ Data.Text.Internal.Text Main.$fYesodApp16 w
                 } in
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        corrected
                        w of wild {
                   GHC.Types.False
                   -> Data.Either.Left
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        corrected
                   GHC.Types.True
                   -> Data.Either.Right
                        @ [Data.Text.Internal.Text]
                        @ [Data.Text.Internal.Text]
                        (GHC.Base.map
                           @ Data.Text.Internal.Text
                           @ Data.Text.Internal.Text
                           Main.$fYesodApp14
                           w) }) -}
7651a39c0c8db56680fa5d8f581f3d30
  $w$cfileUpload ::
    Network.Wai.Internal.RequestBodyLength
    -> Yesod.Core.Types.FileUpload
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Network.Wai.Internal.RequestBodyLength ->
                 case w of wild {
                   Network.Wai.Internal.ChunkedBody -> Main.$fYesodApp5
                   Network.Wai.Internal.KnownLength size
                   -> case size of wild1 { GHC.Word.W64# a50 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# a50 __word 50000) of wild2 {
                        GHC.Types.False -> Main.$fYesodApp5
                        GHC.Types.True -> Main.$fYesodApp3 } } }) -}
a4a14d9f5ba74143fd612ceda4baa745
  $w$cjoinPath ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> [(Data.Text.Internal.Text, Data.Text.Internal.Text)]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Data.Text.Internal.Text
                   w1 :: [Data.Text.Internal.Text]
                   w2 :: [(Data.Text.Internal.Text, Data.Text.Internal.Text)] ->
                 let {
                   a50 :: [GHC.Types.Char]
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       a51 :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <L,U>, Inline: [0] -}
                       = \ ww :: GHC.Prim.Int# ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww a51) of wild1 {
                           GHC.Types.False
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.geWord# r# __word 55296) of wild2 {
                                GHC.Types.False
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1))
                                GHC.Types.True
                                -> case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.leWord# r# __word 56319) of wild3 {
                                     GHC.Types.False
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1))
                                     GHC.Types.True
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296)
                                                         10)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320))
                                                   65536)))
                                          ($wunfold (GHC.Prim.+# ww 2)) } } } }
                           GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 let {
                   ds1 :: Data.ByteString.Builder.Internal.Builder
                   = case GHC.Base.map
                            @ (Data.Text.Internal.Text, Data.Text.Internal.Text)
                            @ (Data.ByteString.Internal.ByteString,
                               GHC.Base.Maybe Data.ByteString.Internal.ByteString)
                            Main.$fYesodApp13
                            w2 of wild {
                       []
                       -> case w1 of wild1 {
                            [] -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodApp12
                            : ds2 ds3
                            -> Network.HTTP.Types.URI.encodePathSegments
                                 (GHC.Base.map
                                    @ Data.Text.Internal.Text
                                    @ Data.Text.Internal.Text
                                    Main.$fYesodApp11
                                    wild1) }
                       : ipv ipv1
                       -> let {
                            ds2 :: Data.ByteString.Builder.Internal.Builder
                            = case w1 of wild1 {
                                [] -> Network.HTTP.Types.URI.encodePathSegments Main.$fYesodApp12
                                : ds3 ds4
                                -> Network.HTTP.Types.URI.encodePathSegments
                                     (GHC.Base.map
                                        @ Data.Text.Internal.Text
                                        @ Data.Text.Internal.Text
                                        Main.$fYesodApp11
                                        wild1) }
                          } in
                          let {
                            ds3 :: Data.ByteString.Builder.Internal.Builder
                            = case ipv of ww { (,) ww1 ww2 ->
                              Network.HTTP.Types.URI.$wgo
                                Network.HTTP.Types.URI.encodePath1
                                  `cast`
                                (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0]))
                                ww1
                                ww2 }
                          } in
                          let {
                            ds4 :: Data.ByteString.Builder.Internal.Builder
                            = Network.HTTP.Types.URI.encodePath_go ipv1
                          } in
                          (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                           ds2 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                             @ r
                             (ds3 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                @ r
                                (ds4 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                                   @ r
                                   eta)))
                            `cast`
                          (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])) }
                 } in
                 (\ @ r eta :: Data.ByteString.Builder.Internal.BuildStep r ->
                  let {
                    w3 :: Data.ByteString.Builder.Internal.BufferRange
                          -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r)
                    = ds1 `cast` (Data.ByteString.Builder.Internal.NTCo:Builder[0])
                        @ r
                        eta
                  } in
                  \ w4 :: Data.ByteString.Builder.Internal.BufferRange
                    w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                  case w4 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                  Main.$wa3 @ r a50 w3 ww1 ww2 w5 })
                   `cast`
                 (Trans
                      (forall r.
                       <Data.ByteString.Builder.Internal.BuildStep r>_R
                       ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                       ->_R Sym (GHC.Types.NTCo:IO[0]
                                     <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                      (Sym (Data.ByteString.Builder.Internal.NTCo:Builder[0])))) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $w$cparseRoute ::
    [Data.Text.Internal.Text]
    -> GHC.Base.Maybe (Yesod.Routes.Class.Route Main.App)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
bf4412b6da8a98e0847dc15e9cd2360b
  $w$crenderRoute ::
    Yesod.Routes.Class.Route Main.App
    -> (# [Data.Text.Internal.Text],
          [(Data.Text.Internal.Text, Data.Text.Internal.Text)] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: Yesod.Routes.Class.Route Main.App ->
                 case w `cast` (Sub (Main.TFCo:R:RouteApp[0])) of wild {
                   Main.TestR
                   -> (# Main.$fRenderRouteApp5,
                         GHC.Types.[]
                           @ (Data.Text.Internal.Text, Data.Text.Internal.Text) #)
                   Main.AddR dyn dyn1
                   -> (# GHC.Types.:
                           @ Data.Text.Internal.Text
                           Main.$fRenderRouteApp4
                           (GHC.Types.:
                              @ Data.Text.Internal.Text
                              (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn)
                              (GHC.Types.:
                                 @ Data.Text.Internal.Text
                                 (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn1)
                                 (GHC.Types.[] @ Data.Text.Internal.Text))),
                         GHC.Types.[]
                           @ (Data.Text.Internal.Text, Data.Text.Internal.Text) #)
                   Main.SubR dyn dyn1
                   -> (# GHC.Types.:
                           @ Data.Text.Internal.Text
                           Main.$fRenderRouteApp3
                           (GHC.Types.:
                              @ Data.Text.Internal.Text
                              (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn)
                              (GHC.Types.:
                                 @ Data.Text.Internal.Text
                                 (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn1)
                                 (GHC.Types.[] @ Data.Text.Internal.Text))),
                         GHC.Types.[]
                           @ (Data.Text.Internal.Text, Data.Text.Internal.Text) #)
                   Main.MultR dyn dyn1
                   -> (# GHC.Types.:
                           @ Data.Text.Internal.Text
                           Main.$fRenderRouteApp2
                           (GHC.Types.:
                              @ Data.Text.Internal.Text
                              (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn)
                              (GHC.Types.:
                                 @ Data.Text.Internal.Text
                                 (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn1)
                                 (GHC.Types.[] @ Data.Text.Internal.Text))),
                         GHC.Types.[]
                           @ (Data.Text.Internal.Text, Data.Text.Internal.Text) #)
                   Main.DivR dyn dyn1
                   -> (# GHC.Types.:
                           @ Data.Text.Internal.Text
                           Main.$fRenderRouteApp1
                           (GHC.Types.:
                              @ Data.Text.Internal.Text
                              (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn)
                              (GHC.Types.:
                                 @ Data.Text.Internal.Text
                                 (Web.PathPieces.$fPathPieceInt_$ctoPathPiece dyn1)
                                 (GHC.Types.[] @ Data.Text.Internal.Text))),
                         GHC.Types.[]
                           @ (Data.Text.Internal.Text, Data.Text.Internal.Text) #) }) -}
d35b17fe98bc653cbab6cca14eb53ca2
  $w$ctoJSON ::
    Data.Text.Internal.Text
    -> GHC.Types.Int -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ ww :: Data.Text.Internal.Text ww1 :: GHC.Types.Int ->
                 case Data.Aeson.Types.Internal.$sfromList1
                        @ Data.Aeson.Types.Internal.Value
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Main.$fToJSONPerson2, Data.Aeson.Types.Internal.$WString ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Main.$fToJSONPerson1,
                               case ww1 of wild { GHC.Types.I# i ->
                               case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                               Data.Aeson.Types.Internal.Number
                                 (Data.Scientific.Scientific dt 0) } })
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of dt { DEFAULT ->
                 (# dt #) }) -}
bf4412b6da8a98e0847dc15e9cd2360b
  $w$cyesodDispatch ::
    Yesod.Core.Types.YesodRunnerEnv Main.App
    -> Network.HTTP.Types.Method.Method
    -> Network.HTTP.Types.Version.HttpVersion
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> GHC.Types.Bool
    -> Network.Socket.Types.SockAddr
    -> [Data.Text.Internal.Text]
    -> Network.HTTP.Types.URI.Query
    -> GHC.Types.IO Data.ByteString.Internal.ByteString
    -> Data.Vault.Lazy.Vault
    -> Network.Wai.Internal.RequestBodyLength
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> GHC.Base.Maybe Data.ByteString.Internal.ByteString
    -> (Network.Wai.Internal.Response
        -> GHC.Types.IO Network.Wai.Internal.ResponseReceived)
    -> GHC.Types.IO Network.Wai.Internal.ResponseReceived
  {- Arity: 17,
     Strictness: <L,U(U,U,U,U,C(U(U,1*U(U,U,U))))><L,U(U,U,U,U)><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
32b673ea5af4ad69aef2c2a22d2309d5
  $w$sgo5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
bf4412b6da8a98e0847dc15e9cd2360b
  $wa ::
    Yesod.Core.Types.HandlerT Main.App GHC.Types.IO res
    -> Yesod.Core.Types.YesodRequest
    -> Yesod.Core.Types.RunHandlerEnv Main.App
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Yesod.Core.Types.GHState
    -> (Yesod.Routes.Class.Route Main.App
        -> Yesod.Core.Types.MonadRoute GHC.Types.IO)
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld Control.Monad.Trans.Resource.Internal.ReleaseMap
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, res #)
  {- Arity: 7,
     Strictness: <L,1*C1(C1(U(U,U)))><S,U><S,U><L,U><S,U><L,U><L,U>,
     Inline: [0] -}
3c3924b7a9566d08e91896cc04db6d86
  $wa1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Yesod.Core.Types.SessionBackend #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ w :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case Web.ClientSession.getDefaultKey2
                        Web.ClientSession.defaultKeyFile
                        w of ds1 { (#,#) ipv ipv1 ->
                 case Yesod.Core.Internal.Session.clientSessionDateCacher1
                        Main.$fYesodApp7
                          `cast`
                        (Trans
                             (Sym (Data.Fixed.NTCo:Fixed[0] <Data.Fixed.E12>_P))
                             (Sym (Data.Time.Clock.UTC.NTCo:NominalDiffTime[0])))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild { (,) getCachedDate _closeDateCacher ->
                 (# ipv2,
                    GHC.Base.Just
                      @ Yesod.Core.Types.SessionBackend
                      (Yesod.Core.Class.Yesod.defaultClientSessionBackend3
                         ipv1
                         getCachedDate
                         Yesod.Core.Class.Yesod.defaultClientSessionBackend2)
                        `cast`
                      (Trans
                           (<Network.Wai.Internal.Request>_R
                            ->_R Sym (GHC.Types.NTCo:IO[0]
                                          <(Data.Map.Base.Map
                                              Data.Text.Internal.Text
                                              Data.ByteString.Internal.ByteString,
                                            Yesod.Core.Types.SessionMap
                                            -> GHC.Types.IO [Yesod.Core.Types.Header])>_R))
                           (Sym (Yesod.Core.Types.NTCo:SessionBackend[0]))) #) } } }) -}
b532969551f443d3d551f41cde2112a0
  $wa2 ::
    Yesod.Core.Types.Logger
    -> Language.Haskell.TH.Syntax.Loc
    -> Control.Monad.Logger.LogSource
    -> Control.Monad.Logger.LogLevel
    -> System.Log.FastLogger.LogStr.LogStr
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,U(U(A,1*U(U),1*U(U(U),U(U),A,U),1*C1(U(U,U))),U)><L,1*U(1*U,U,1*U,1*U(1*U(U),1*U(U)),A)><L,1*U(U,U,U)><S,U><L,1*U(U,C(U))><L,U>,
     Inline: [0],
     Unfolding: (\ w :: Yesod.Core.Types.Logger
                   w1 :: Language.Haskell.TH.Syntax.Loc
                   w2 :: Control.Monad.Logger.LogSource
                   w3 :: Control.Monad.Logger.LogLevel
                   w4 :: System.Log.FastLogger.LogStr.LogStr
                   w5 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 let {
                   $j :: GHC.Prim.Void#
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 1, Strictness: <L,A> -}
                   = \ w6 :: GHC.Prim.Void#[OneShot] ->
                     case Yesod.Core.Class.Yesod.defaultMessageLoggerSource2
                            (Yesod.Core.Types.loggerDate w)
                            w1
                            w2
                            w3
                            w4
                            w5 of ds2 { (#,#) ipv2 ipv3 ->
                     Yesod.Core.Types.loggerPutStr1 w ipv3 ipv2 }
                 } in
                 case w3 of wild {
                   Control.Monad.Logger.LevelDebug -> (# w5, GHC.Tuple.() #)
                   Control.Monad.Logger.LevelInfo -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelWarn -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelError -> $j GHC.Prim.void#
                   Control.Monad.Logger.LevelOther a129 -> $j GHC.Prim.void# }) -}
5201f5b03df6ef65d7177ad6e563f004
  $wa3 ::
    [GHC.Types.Char]
    -> (Data.ByteString.Builder.Internal.BufferRange
        -> GHC.Types.IO (Data.ByteString.Builder.Internal.BuildSignal r))
    -> GHC.Prim.Addr#
    -> GHC.Prim.Addr#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.ByteString.Builder.Internal.BuildSignal r #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,C(C1(U(U,U)))><L,U><L,U><L,U>, Inline: [0] -}
f34e409d1f95501283ab9b090da5dfa9
  $wgo5 ::
    GHC.Prim.Int#
    -> Data.Set.Base.Set Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> Data.Set.Base.Set Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
bf4412b6da8a98e0847dc15e9cd2360b
  data App = App
    Promotable
9a208c491b756bf2dfcba8366fdf160a
  type Handler = Yesod.Core.Types.HandlerT Main.App GHC.Types.IO
efb0c087f4d4a2baa6a921d47dadf34c
  data Person
    = Person {name :: Data.Text.Internal.Text, age :: GHC.Types.Int}
bf4412b6da8a98e0847dc15e9cd2360b
  data instance Yesod.Routes.Class.Route Main.App
    = TestR
    | AddR GHC.Types.Int GHC.Types.Int
    | SubR GHC.Types.Int GHC.Types.Int
    | MultR GHC.Types.Int GHC.Types.Int
    | DivR GHC.Types.Int GHC.Types.Int
    RecFlag: Recursive
bf4412b6da8a98e0847dc15e9cd2360b
  axiom TFCo:R:RouteApp::
      Yesod.Routes.Class.Route Main.App = Main.R:RouteApp
2006b0e024fc32cf7a0fe3a4a6d8cc22
  type Widget = Yesod.Core.Types.WidgetT Main.App GHC.Types.IO ()
ca07e8ad771d1e6e50450806deb975d6
  age :: Main.Person -> GHC.Types.Int
  RecSel Main.Person
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Person ->
                 case ds of wild { Main.Person ds1 ds2 -> ds2 }) -}
e0d03e4694356f4093168968f102c73c
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e05e1fd10f07a5cffd5c56f2b2ed6072
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Yesod.Core.Dispatch.warp1
                   @ Main.App
                   Main.$fYesodDispatchApp
                   Main.main2
                   Main.App) -}
c570853c265a1948cbf6d47b1d90bd6a
  main2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3000) -}
8024c618dbc8b2bb2c84499881e05dd6
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R))) -}
e89e1005ae3909c6f0ba368ff89a250a
  name :: Main.Person -> Data.Text.Internal.Text
  RecSel Main.Person
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ ds :: Main.Person ->
                 case ds of wild { Main.Person ds1 ds2 -> ds1 }) -}
instance GHC.Classes.Eq [Yesod.Routes.Class.Route] = Main.$fEqRoute
instance Yesod.Routes.Class.ParseRoute [Main.App]
  = Main.$fParseRouteApp
instance GHC.Read.Read [Yesod.Routes.Class.Route]
  = Main.$fReadRoute
instance Yesod.Routes.Class.RenderRoute [Main.App]
  = Main.$fRenderRouteApp
instance Yesod.Routes.Class.RouteAttrs [Main.App]
  = Main.$fRouteAttrsApp
instance GHC.Show.Show [Yesod.Routes.Class.Route]
  = Main.$fShowRoute
instance Data.Aeson.Types.Class.ToJSON [Main.Person]
  = Main.$fToJSONPerson
instance Yesod.Core.Class.Yesod.Yesod [Main.App] = Main.$fYesodApp
instance Yesod.Core.Class.Dispatch.YesodDispatch [Main.App]
  = Main.$fYesodDispatchApp
family instance Yesod.Routes.Class.Route [Main.App]
  = Main.TFCo:R:RouteApp
"SPEC/Main $dmapproot @ App" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                          Main.App
  Yesod.Core.Class.Yesod.$dmapproot @ Main.App $dYesod
  = Main.$fYesodApp_$s$dmapproot
"SPEC/Main $dmauthRoute @ App" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                            Main.App
  Yesod.Core.Class.Yesod.$dmauthRoute @ Main.App $dYesod
  = Main.$fYesodApp_$s$dmauthRoute
"SPEC/Main $dmjsLoader @ App" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                           Main.App
  Yesod.Core.Class.Yesod.$dmjsLoader @ Main.App $dYesod
  = Main.$fYesodApp_$s$dmjsLoader
"SPEC/Main $dmmaximumContentLength @ App" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                       Main.App
  Yesod.Core.Class.Yesod.$dmmaximumContentLength @ Main.App $dYesod
  = Main.$fYesodApp_$s$dmmaximumContentLength
"SPEC/Main $dmreadsPrec @ (Route App)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                   (Yesod.Routes.Class.Route
                                                                      Main.App)
  GHC.Read.$dmreadsPrec @ (Yesod.Routes.Class.Route Main.App) $dRead
  = Main.$fReadRoute_$s$dmreadsPrec
"SPEC/Main $dmshouldLog @ App" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                            Main.App
  Yesod.Core.Class.Yesod.$dmshouldLog @ Main.App $dYesod
  = Main.$fYesodApp_$s$dmshouldLog
"SPEC/Main $dmurlRenderOverride @ App" [ALWAYS] forall $dYesod :: Yesod.Core.Class.Yesod.Yesod
                                                                    Main.App
  Yesod.Core.Class.Yesod.$dmurlRenderOverride @ Main.App $dYesod
  = Main.$fYesodApp_$s$dmurlRenderOverride
"SPEC/Main $fApplicativeHandlerT @ App @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                            (Yesod.Core.Types.HandlerT
                                                                               Main.App
                                                                               GHC.Types.IO)
                                                             $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT @ Main.App
                                         @ GHC.Types.IO
                                         $dFunctor
                                         $dMonad
  = Main.$fYesodApp_$s$fApplicativeHandlerT
"SPEC/Main $fApplicativeHandlerT_$cpure @ App @ IO" [ALWAYS] forall $dFunctor :: GHC.Base.Functor
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.App
                                                                                      GHC.Types.IO)
                                                                    $dMonad :: GHC.Base.Monad
                                                                                 GHC.Types.IO
  Yesod.Core.Types.$fApplicativeHandlerT_$cpure @ Main.App
                                                @ GHC.Types.IO
                                                $dFunctor
                                                $dMonad
  = Main.$fYesodApp_$s$fApplicativeHandlerT_$cpure
"SPEC/Main $fMonadBasebHandlerT @ IO @ App @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                    GHC.Types.IO
                                                                 $dApplicative1 :: GHC.Base.Applicative
                                                                                     (Yesod.Core.Types.HandlerT
                                                                                        Main.App
                                                                                        GHC.Types.IO)
                                                                 $dMonad :: GHC.Base.Monad
                                                                              GHC.Types.IO
                                                                 $dMonad1 :: GHC.Base.Monad
                                                                               (Yesod.Core.Types.HandlerT
                                                                                  Main.App
                                                                                  GHC.Types.IO)
                                                                 $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                  GHC.Types.IO
                                                                                  GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT @ GHC.Types.IO
                                        @ Main.App
                                        @ GHC.Types.IO
                                        $dApplicative
                                        $dApplicative1
                                        $dMonad
                                        $dMonad1
                                        $dMonadBase
  = Main.$fYesodApp_$s$fMonadBasebHandlerT
"SPEC/Main $fMonadBasebHandlerT_$cliftBase @ IO @ App @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                                               GHC.Types.IO
                                                                            $dApplicative1 :: GHC.Base.Applicative
                                                                                                (Yesod.Core.Types.HandlerT
                                                                                                   Main.App
                                                                                                   GHC.Types.IO)
                                                                            $dMonad :: GHC.Base.Monad
                                                                                         GHC.Types.IO
                                                                            $dMonad1 :: GHC.Base.Monad
                                                                                          (Yesod.Core.Types.HandlerT
                                                                                             Main.App
                                                                                             GHC.Types.IO)
                                                                            $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                             GHC.Types.IO
                                                                                             GHC.Types.IO
  Yesod.Core.Types.$fMonadBasebHandlerT_$cliftBase @ GHC.Types.IO
                                                   @ Main.App
                                                   @ GHC.Types.IO
                                                   $dApplicative
                                                   $dApplicative1
                                                   $dMonad
                                                   $dMonad1
                                                   $dMonadBase
  = Main.$fYesodApp_$s$fMonadBasebHandlerT_$cliftBase
"SPEC/Main $fMonadHandlerHandlerT @ App @ IO" [ALWAYS] forall $dMonadResource :: Control.Monad.Trans.Resource.Internal.MonadResource
                                                                                   (Yesod.Core.Types.HandlerT
                                                                                      Main.App
                                                                                      GHC.Types.IO)
                                                              tup :: Control.Monad.Trans.Resource.MonadResourceBase
                                                                       GHC.Types.IO
  Yesod.Core.Class.Handler.$fMonadHandlerHandlerT @ Main.App
                                                  @ GHC.Types.IO
                                                  $dMonadResource
                                                  tup
  = Main.$fYesodApp_$s$fMonadHandlerHandlerT
"SPEC/Main $fMonadHandlerT @ App @ IO" [ALWAYS] forall $dApplicative :: GHC.Base.Applicative
                                                                          (Yesod.Core.Types.HandlerT
                                                                             Main.App GHC.Types.IO)
                                                       $dMonad :: GHC.Base.Monad GHC.Types.IO
  Yesod.Core.Types.$fMonadHandlerT @ Main.App
                                   @ GHC.Types.IO
                                   $dApplicative
                                   $dMonad
  = Main.$fYesodApp_$s$fMonadHandlerT
"SPEC/Main $fMonadIOHandlerT @ App @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                      (Yesod.Core.Types.HandlerT
                                                                         Main.App GHC.Types.IO)
                                                         $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                        GHC.Types.IO
  Yesod.Core.Types.$fMonadIOHandlerT @ Main.App
                                     @ GHC.Types.IO
                                     $dMonad
                                     $dMonadIO
  = Main.$fYesodApp_$s$fMonadIOHandlerT
"SPEC/Main $fMonadResourceHandlerT @ App @ IO" [ALWAYS] forall $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                 (Yesod.Core.Types.HandlerT
                                                                                    Main.App
                                                                                    GHC.Types.IO)
                                                               $dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                              (Yesod.Core.Types.HandlerT
                                                                                 Main.App
                                                                                 GHC.Types.IO)
                                                               $dApplicative :: GHC.Base.Applicative
                                                                                  (Yesod.Core.Types.HandlerT
                                                                                     Main.App
                                                                                     GHC.Types.IO)
                                                               $dMonadBase :: Control.Monad.Base.MonadBase
                                                                                GHC.Types.IO
                                                                                (Yesod.Core.Types.HandlerT
                                                                                   Main.App
                                                                                   GHC.Types.IO)
                                                               $dMonadIO1 :: Control.Monad.IO.Class.MonadIO
                                                                               GHC.Types.IO
                                                               $dMonadBase1 :: Control.Monad.Base.MonadBase
                                                                                 GHC.Types.IO
                                                                                 GHC.Types.IO
                                                               $dMonadThrow1 :: Control.Monad.Catch.MonadThrow
                                                                                  GHC.Types.IO
  Yesod.Core.Types.$fMonadResourceHandlerT @ Main.App
                                           @ GHC.Types.IO
                                           $dMonadThrow
                                           $dMonadIO
                                           $dApplicative
                                           $dMonadBase
                                           $dMonadIO1
                                           $dMonadBase1
                                           $dMonadThrow1
  = Main.$fYesodApp_$s$fMonadResourceHandlerT
"SPEC/Main $fMonadThrowHandlerT @ App @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                         (Yesod.Core.Types.HandlerT
                                                                            Main.App GHC.Types.IO)
                                                            $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                              GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT @ Main.App
                                        @ GHC.Types.IO
                                        $dMonad
                                        $dMonadThrow
  = Main.$fYesodApp_$s$fMonadThrowHandlerT
"SPEC/Main $fMonadThrowHandlerT_$cthrowM @ App @ IO" [ALWAYS] forall $dMonad :: GHC.Base.Monad
                                                                                  (Yesod.Core.Types.HandlerT
                                                                                     Main.App
                                                                                     GHC.Types.IO)
                                                                     $dMonadThrow :: Control.Monad.Catch.MonadThrow
                                                                                       GHC.Types.IO
  Yesod.Core.Types.$fMonadThrowHandlerT_$cthrowM @ Main.App
                                                 @ GHC.Types.IO
                                                 $dMonad
                                                 $dMonadThrow
  = Main.$fYesodApp_$s$fMonadThrowHandlerT_$cthrowM
"SPEC/Main fromList @ Text" [ALWAYS] forall $dOrd :: GHC.Classes.Ord
                                                       Data.Text.Internal.Text
  Data.Set.Base.fromList @ Data.Text.Internal.Text $dOrd
  = Main.$fRouteAttrsApp_$sfromList
"SPEC/Main readListDefault @ (Route App)" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                                      (Yesod.Routes.Class.Route
                                                                         Main.App)
  GHC.Read.readListDefault @ (Yesod.Routes.Class.Route Main.App)
                           $dRead
  = Main.$fReadRoute_$sreadListDefault
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

